package org.example.lection_5;

import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;

public class ClientExample1 {
    public static void main(String[] args){
//        // Socket - класс, который позволяет подключиться
//        // к определённому серверу и определённому порту этого сервера
//        // посмотрим, как можно создать самоподключение
        new Socket();
//
//        // Конструкторы Socket:
//        // 1) без параметров (неподключённый Socket) - используется, если
//        // в дальнейшем будем самостоятельно реализовать подключение
//
//        // 2) Socket(String host, int port) - классический конструктор,
//        // принимет IP-адрес, номер порта
//
//        // 3) Socket(InetAddress address, int port) - принимает IP-адрес
//        // (уже не строка, а InetAddress, можно работать с узлами сети по их доменному имени),
//        // номер порта
//
//        // 4) Socket(String host, int port, @Nullable InetAddress localAddr, int localPort)
//        // - принимает IP-адрес строке, int port, локальный адрес, локальный порт.
//        // Т.е. 3 и 4 параметрами в конструктор мы передаём свой адрес и свой порт
//        // когда сервер знает свой адрес и порт, он слушает этот порт и жде. какое-то входящее
//        // подключение, чтобы на него отреагировать
//        // Пока клиент не подключился, мы ничего не делаем, а как только он подключается, занимент порт
//        // и никто другой не может к нему подключиться
//
//        // Получается, чтобы сервер мог обеспечить подключение к нему нескольких клиентов к одному порту
//        // нужно использовать специальный механизм
//        // Получая запрос на подключение, сервер производит подключение не по тому порту, который
//        // он слушает, а по одному из свободных портов, или порту, указанному в 4 конструкторе 4-м параметром
//
//        // 5) Socket(InetAddress adress, int port, @Nullable InetAddress localAddr, int localPort)
//
//        try{
//            InetAddress address = InetAddress.getLocalHost(); // получаем адрес текущей машины
//            // (будем подключаться сами к себе)
//            Socket client = new Socket(address, 1300); // создаём подключение
//            // при запуске получим ошибку, мы создали подключение, но подключиться не к чему
//            // т. к. не запущена серверная часть
//            // (клиент пошёл по IP-адресу к серверной части, но её не нашёл)
//
//            // после создания и подключения серверной части подключение прошло успешно
//        }
//        catch (UnknownHostException e){
//            throw  new RuntimeException(e);
//        }
//        catch (IOException e){
//            throw new RuntimeException(e);
//        }
//
    }

 }
